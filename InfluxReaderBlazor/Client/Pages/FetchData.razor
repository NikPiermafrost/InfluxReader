@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using InfluxReaderBlazor.Shared
@using Newtonsoft.Json

@if (!valuesLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <ChartComponent List="@List" CallNewData="@UpdateGraphData" DropDownValues="@dataConfig" isSliderActivable="@isSliderActivable"></ChartComponent>
    </div>
}

@code {
    private List<ValueModel> List = new List<ValueModel>();
    private bool valuesLoaded = false;
    private SimulationValues SimulationValues = new SimulationValues();
    private string baseUrl => "/api/Data";
    private IEnumerable<string> dataConfig;
    private bool isSliderActivable = false;

    protected override async Task OnInitializedAsync()
    {
        //gets the configuration for the app (example: database tables)
        var getTables = await Http.GetFromJsonAsync<List<string>>(baseUrl);
        dataConfig = getTables;
        //set the first http request to fetch the data
        var InitialParams = new RequestParams()
        {
            StartDate = DateTime.Today.Ticks,
            EndDate = DateTime.Now.Ticks,
            Entities = dataConfig.Take(1).ToList()
        };
        var request = await Http.PostAsJsonAsync(baseUrl, InitialParams);
        if (request.IsSuccessStatusCode)
        {
            //the if else triggers the lifecycle of the Chart component
            List = await request.Content.ReadFromJsonAsync<List<ValueModel>>();
            isSliderActivable = List.First().Values.Count > 1;
            valuesLoaded = true;
        }
    }

    public async Task UpdateGraphData(RequestParams requestParams)
    {
        //method who handles the reset of the graph if a new request is asked
        var newList = requestParams.Entities.Where(x => !string.IsNullOrEmpty(x)).ToList();
        requestParams.Entities = newList;
        var res = await Http.PostAsJsonAsync(baseUrl, requestParams);
        if (res.IsSuccessStatusCode)
        {
            List = await res.Content.ReadFromJsonAsync<List<ValueModel>>();
            isSliderActivable = List.First().Values.Count > 1;
            StateHasChanged();
            if (requestParams.ActivateSlider)
            {
                await JSRuntime.InvokeVoidAsync("chartInitializer", JsonConvert.SerializeObject(List));
                await JSRuntime.InvokeVoidAsync("initSlider", List.First().Values.Count - 1);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("newDataset", Newtonsoft.Json.JsonConvert.SerializeObject(List));
                await JSRuntime.InvokeVoidAsync("updateSliderValue", List.First().Values.Count - 1);
            }
        }
    }
}
