@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using InfluxReaderBlazor.Shared

@if (!valuesLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <ChartComponent List="@List" CallNewData="@UpdateGraphData" DropDownValues="@dataConfig"></ChartComponent>
    </div>
}

@code {
    private List<ValueModel> List = new List<ValueModel>();
    private bool valuesLoaded = false;
    private SimulationValues SimulationValues = new SimulationValues();
    private string baseUrl => "https://localhost:44387/api/Data";
    private IEnumerable<string> dataConfig;

    protected override async Task OnInitializedAsync()
    {
        var getConfig = await Http.GetFromJsonAsync<ConfigModel>("/configurationData.json");
        dataConfig = getConfig.DataTables;
        var InitialParams = new RequestParams()
        {
            StartDate = DateTime.Today.Ticks,
            EndDate = DateTime.Now.Ticks,
            Entities = new List<string>() { "string", "int", "bool", "float" }
        };
        var request = await Http.PostAsJsonAsync(baseUrl, InitialParams);
        if (request.IsSuccessStatusCode)
        {
            List = await request.Content.ReadFromJsonAsync<List<ValueModel>>();
            valuesLoaded = true;
        }
    }

    public async Task UpdateGraphData(RequestParams requestParams)
    {
        var newList = requestParams.Entities.Where(x => !string.IsNullOrEmpty(x)).ToList();
        requestParams.Entities = newList;
        var res = await Http.PostAsJsonAsync(baseUrl, requestParams);
        if (res.IsSuccessStatusCode)
        {
            List = await res.Content.ReadFromJsonAsync<List<ValueModel>>();
            await JSRuntime.InvokeVoidAsync("newDataset", Newtonsoft.Json.JsonConvert.SerializeObject(List));
            await JSRuntime.InvokeVoidAsync("updateSliderValue", List.First().Values.Count - 1);
        }
    }
}
