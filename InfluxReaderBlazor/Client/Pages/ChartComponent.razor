@inject IJSRuntime JSRuntime
@using InfluxReaderBlazor.Shared
@using Newtonsoft.Json
@using Radzen.Blazor
@inject NavigationManager NavigationManager

<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between">
            <div class="d-flex">
                <label class="mr-3">From: </label>
                <input type="date" class="form-control form-control-sm mr-3" @bind="@StartDate" />
                <label class="mx-3">To: </label>
                <input type="date" class="form-control form-control-sm mr-3" @bind="@EndDate" />
            </div>
            <div class="d-flex">
                <RadzenDropDown AllowClear="false"
                                @bind-Value="Selected"
                                Multiple="true"
                                Data="DropDownValues"
                                class="form-control form-control-sm mr-3"></RadzenDropDown>
                <button type="button" class="btn btn-sm btn-primary mr-3" @onclick="@(() => UpdateDataTimeStamp())">Update</button>
                <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/fetchdata/simulation"))">Start</button>
            </div>
        </div>
    </div>
    <div class="card-body" style="min-height: 600px;">
        @if (List != null)
        {
            <div>
                <canvas id="integer-chart" style="width: 100%; height: 600px !important"></canvas>
            </div>
        }
    </div>
    <div class="card-footer">
        @if (List != null && List.Count > 1)
        {
            <div id="range-slider"></div>
        }
    </div>
</div>

@code {

    private int SliderValue = 0;
    private DateTime StartDate = DateTime.Today;
    private DateTime EndDate = DateTime.Now;
    private IEnumerable<string> Selected = new string[] { };

    [Parameter]
    public List<ValueModel> List { get; set; }

    [Parameter]
    public IEnumerable<string> DropDownValues { get; set; }

    [Parameter]
    public EventCallback<RequestParams> CallNewData { get; set; }

    protected override void OnInitialized()
    {
        Selected = DropDownValues;
        SliderValue = List.First().Values.Count - 1;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //calls the javascript interop file to handle chartjs and ionslider
            await JSRuntime.InvokeVoidAsync("chartInitializer", JsonConvert.SerializeObject(List));
            await JSRuntime.InvokeVoidAsync("initSlider", List.First().Values.Count - 1);
        }
    }

    private async Task UpdateDataTimeStamp()
    {
        //updates the values requested
        var toEmit = new RequestParams()
        {
            EndDate = EndDate.Date == StartDate.Date ? DateTime.Now.Ticks : EndDate.Ticks,
            StartDate = EndDate.Date == StartDate.Date ? DateTime.Today.Ticks : StartDate.Ticks,
            Entities = Selected.ToList()
        };
        await CallNewData.InvokeAsync(toEmit);
    }

}