@page "/fetchdata/simulation"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using InfluxReaderBlazor.Shared
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable

<div class="container-fluid">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between">
                <div class="d-flex">
                    <label class="mr-3" for="looptime">Frequency(ms):</label>
                    <input id="looptime" type="number" class="form-control form-control-sm mr-3" @bind="LoopTime" />
                    <label for="zoom" class="mr-3">Zoom: </label>
                    <input id="zoom" min="5" value="5" type="number" class="form-control form-control-sm" @onchange="@(e => ChangeZoomlevel(e))" />
                </div>
                <button class="btn btn-primary btn-sm" @onclick="@BackToData">Back to data</button>
            </div>
        </div>
        <div class="card-body" style="min-height: 600px;">
            <canvas id="replay-chart" style="width: 100%;  height: 600px !important"></canvas>
        </div>
        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-warning" @onclick="@ResetSimulation">Reset Simulation</button>
                <div>
                    <button type="button" disabled="@(!IsConnected)" class="btn btn-success mr-3" @onclick="@RunSimulation">Start simulation</button>
                    <button type="button" class="btn btn-primary mr-3" @onclick="@LoopSimulation">loop simulation</button>
                    <button type="button" class="btn btn-danger mr-3" @onclick="@StopSimulation">Stop simulation</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;

    private string baseUrl => "https://localhost:44387/api/RabbitSender";

    private int LoopTime = 500;

    private List<ValueModel> ReplayChartArray = new List<ValueModel>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/replayhub"))
        .Build();

        hubConnection.On<int>("CounterForjs", async (counter) =>
        {
            await JSRuntime.InvokeVoidAsync("addDataToSimulation", counter);
        });

        await hubConnection.StartAsync();
    }

    void BackToData()
    {

        NavigationManager.NavigateTo("/fetchdata");
    }

    async Task ChangeZoomlevel(ChangeEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("setZoomLevel", Convert.ToInt32(e.Value));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ReplayChartArray = await JSRuntime.InvokeAsync<List<ValueModel>>("initReplayChart");
        }
    }

    private async Task RunSimulation()
    {
        if (await JSRuntime.InvokeAsync<bool>("clearSimulationChart"))
        {
            await hubConnection.SendAsync("InitializeSimulation", ReplayChartArray, LoopTime);
        }
    }

    private async Task LoopSimulation()
    {
        //await JSRuntime.InvokeVoidAsync("loopSimulation", LoopTime, Zoomlevel);
    }

    private async Task StopSimulation()
    {
        //await JSRuntime.InvokeVoidAsync("stopExecution");
    }

    private async Task ResetSimulation()
    {
        //await JSRuntime.InvokeVoidAsync("resetAfterSimulation");
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
