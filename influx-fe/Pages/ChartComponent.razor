@inject IJSRuntime JSRuntime
@using influx_fe.Models
@using Newtonsoft.Json

<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between">
            <div class="d-flex">
                <label class="pr-3">From: </label>
                <input type="date" class="form-comtrol pr-3" @bind="@StartDate"/>
                <label class="px-3">To: </label>
                <input type="date" class="form-comtrol pr-3" @bind="@EndDate"/>
            </div>
            <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => UpdateDataTimeStamp())">Update Data</button>
        </div>
    </div>
    <div class="card-body" style="min-height: 600px;">
        @if (List != null)
        {
            <div>
                <canvas id="integer-chart" style="width: 100%; height: 600px !important"></canvas>
            </div>
        }
    </div>
    <div class="card-footer" style="height: 50px;">
        @*@if (List != null)
        {
            <div class="d-flex">
                <div class="flex-grow-1 pr-5">
                    <input type="range" min="1" max="@(List.Count - 1)" step="1" value="@(List.Count - 1)" class="form-control" @oninput="@((ChangeEventArgs e) => ChangeSlider(int.Parse((string)e.Value)))" />
                </div>
                <div>
                    <button class="btn btn-primary">Start Simulation</button>
                </div>
            </div>
        }*@
        @if (List != null && List.Count > 1)
        {
            <div id="range-slider"></div>
        }
    </div>
</div>

@code {

    private int SliderValue = 0;
    private DateTime StartDate = DateTime.Today;
    private DateTime EndDate = DateTime.Now;
    private bool IsSimInitialized = false;

    [Parameter]
    public List<IntModel> List { get; set; }

    [Parameter]
    public EventCallback<DataTimeStamps> CallNewData { get; set; }

    protected override void OnInitialized()
    {
        SliderValue = List.Count - 1;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("chartInitializer", JsonConvert.SerializeObject(List));
            await JSRuntime.InvokeVoidAsync("initSlider", List.Count - 1);
        }
    }

    //private async Task StartSimulation()
    //{
    //    var tmpArray = List.Where(x => x.Time.Date >= MinDate.Date
    //                                && x.Time.Date <= MaxDate.Date).ToList();
    //    IsSimInitialized = true;
    //    if (tmpArray.Count > 0)
    //    {
    //        var toEmit = new SimulationValues()
    //        {
    //            StartArray = List.IndexOf(tmpArray.First()),
    //            EndArray = List.IndexOf(tmpArray.Last())
    //        };
    //        await EmitStart.InvokeAsync(toEmit);
    //    }
    //}

    private async Task UpdateDataTimeStamp()
    {
        var toEmit = new DataTimeStamps()
        {
            DateEnd = EndDate.Date == StartDate.Date ? DateTime.Now : EndDate,
            DateStart = EndDate.Date == StartDate.Date ? DateTime.Today : StartDate
        };
        await CallNewData.InvokeAsync(toEmit);
    }

}