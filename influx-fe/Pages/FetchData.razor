@page "/fetchdata"
@inject HttpClient Http
@using influx_fe.Models
@inject IJSRuntime JSRuntime

@if (!valuesLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <ChartComponent List="@List" CallNewData="@UpdateGraphData"></ChartComponent>
    </div>
}

@code {
    private List<ValueModel> List = new List<ValueModel>();
    private bool valuesLoaded = false;
    private SimulationValues SimulationValues = new SimulationValues();
    private string baseUrl => "https://localhost:44387/api/Data";

    protected override async Task OnInitializedAsync()
    {
        var InitialParams = new RequestParams()
        {
            StartDate = DateTime.Today.Ticks,
            EndDate = DateTime.Now.Ticks,
            Entities = new List<string>() { "int", "bool", "float", "string"}
        };
        var request = await Http.PostAsJsonAsync(baseUrl, InitialParams);
        if (request.IsSuccessStatusCode)
        {
            List = await request.Content.ReadFromJsonAsync<List<ValueModel>>();
            valuesLoaded = true;
        }
    }

    public async Task UpdateGraphData(DataTimeStamps dataTimeStamps)
    {
        //var res = await Http.GetAsync(QueryParser(dataTimeStamps.DateStart, dataTimeStamps.DateEnd, "RandomInt"));
        //if (res.IsSuccessStatusCode)
        //{
        //    IntList = await res.Content.ReadFromJsonAsync<List<IntModel>>();
        //}
        //var floatRes = await Http.GetAsync(QueryParser(dataTimeStamps.DateStart, dataTimeStamps.DateEnd, "RandomFloat"));
        //if (floatRes.IsSuccessStatusCode)
        //{
        //    FloatList = await floatRes.Content.ReadFromJsonAsync<List<FloatModel>>();
        //}
        //await UpdateGraph(dataTimeStamps.DataRequested);
    }

    public async Task UpdateGraph(int dataToLoad)
    {
        //switch (dataToLoad)
        //{
        //    case 0:
        //        await JSRuntime.InvokeVoidAsync("newDataset", Newtonsoft.Json.JsonConvert.SerializeObject(IntList));
        //        await JSRuntime.InvokeVoidAsync("updateSliderValue", IntList.Count - 1);
        //        break;
        //    case 1:
        //        await JSRuntime.InvokeVoidAsync("newDataset", Newtonsoft.Json.JsonConvert.SerializeObject(FloatList));
        //        await JSRuntime.InvokeVoidAsync("updateSliderValue", FloatList.Count - 1);
        //        break;
        //    default:
        //        await JSRuntime.InvokeVoidAsync("newDataset", Newtonsoft.Json.JsonConvert.SerializeObject(IntList));
        //        await JSRuntime.InvokeVoidAsync("updateSliderValue", IntList.Count - 1);
        //        break;
        //}
    }
}
