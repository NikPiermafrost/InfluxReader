@page "/fetchdata"
@inject HttpClient Http
@using influx_fe.Models
@inject IJSRuntime JSRuntime

@if (IntList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <ChartComponent List="IntList" CallNewData="@UpdateGraphData"></ChartComponent>
    </div>
}

@code {
    private List<IntModel> IntList;
    private SimulationValues SimulationValues = new SimulationValues();
    private string baseUrl => "https://localhost:44387/api/Data/RandomInt";

    protected override async Task OnInitializedAsync()
    {
        var InitialDataRequest = QueryParser(DateTime.Today, DateTime.Now);
        IntList = await Http.GetFromJsonAsync<List<IntModel>>(InitialDataRequest);
    }

    //public void InitReplay(SimulationValues values)
    //{
    //    if (values.EndArray != values.StartArray)
    //    {
    //        SimulationValues = values;
    //    }
    //    StateHasChanged();
    //}

    public string QueryParser(DateTime StartDate, DateTime EndDate)
    {
        var resultQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
        resultQueryString.Add(nameof(StartDate), StartDate.Ticks.ToString());
        resultQueryString.Add(nameof(EndDate), EndDate.Ticks.ToString());
        return string.Concat(baseUrl, "?", resultQueryString);
    }

    public async Task UpdateGraphData(DataTimeStamps dataTimeStamps)
    {
        var res = await Http.GetAsync(QueryParser(dataTimeStamps.DateStart, dataTimeStamps.DateEnd));
        if (res.IsSuccessStatusCode)
        {
            IntList = await res.Content.ReadFromJsonAsync<List<IntModel>>();
            await JSRuntime.InvokeVoidAsync("newDataset", Newtonsoft.Json.JsonConvert.SerializeObject(IntList));
            await JSRuntime.InvokeVoidAsync("updateSliderValue", IntList.Count - 1);
            StateHasChanged();
        }
    }
}
