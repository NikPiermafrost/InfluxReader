@page "/fetchdata/simulation"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div class="container-fluid">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between">
                <div class="d-flex">
                    <label class="mr-3" for="looptime">Frequency(ms):</label>
                    <input id="looptime" type="number" class="form-control form-control-sm mr-3" @bind="LoopTime" />
                    <label for="zoom" class="mr-3">Zoom: </label>
                    <input id="zoom" type="number" class="form-control form-control-sm" @bind="Zoomlevel" />
                </div>
                <button class="btn btn-primary btn-sm" @onclick="@(() => NavigationManager.NavigateTo("/fetchdata"))">Back to data</button>
            </div>
        </div>
        <div class="card-body" style="min-height: 600px;">
            <canvas id="replay-chart" style="width: 100%;  height: 600px !important"></canvas>
        </div>
        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-warning" @onclick="@ResetSimulation">Reset Simulation</button>
                <div>
                    <button type="button" class="btn btn-success mr-3" @onclick="@RunSimulation">Start simulation</button>
                    <button type="button" class="btn btn-primary mr-3" @onclick="@LoopSimulation">loop simulation</button>
                    <button type="button" class="btn btn-danger mr-3" @onclick="@StopSimulation">Stop simulation</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string baseUrl => "https://localhost:44387/api/RabbitSender";

    private int LoopTime = 500;

    private int Zoomlevel = 5;

    private static Action<string> dataReceiver;

    protected override void OnInitialized()
    {
        dataReceiver = SendToRabbit;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initReplayChart");
        }
    }

    private void SendToRabbit(string Data)
    {
        HttpClient.PostAsJsonAsync(baseUrl, Data);
    }

    private async Task RunSimulation()
    {
        await JSRuntime.InvokeVoidAsync("initializeSimulation", LoopTime, Zoomlevel);
    }

    private async Task LoopSimulation()
    {
        await JSRuntime.InvokeVoidAsync("loopSimulation", LoopTime, Zoomlevel);
    }

    private async Task StopSimulation()
    {
        await JSRuntime.InvokeVoidAsync("stopExecution");
    }

    private async Task ResetSimulation()
    {
        await JSRuntime.InvokeVoidAsync("resetAfterSimulation");
    }

    [JSInvokable]
    public static void receiveRabbitDataFromJs(string Data)
    {
        dataReceiver.Invoke(Data);
    }
}
